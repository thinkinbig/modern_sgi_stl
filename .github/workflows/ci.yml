name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang]
        cpp_std: [20]
        exclude:
          - os: windows-latest
            compiler: clang
          - os: macos-latest
            compiler: gcc

    steps:
    - uses: actions/checkout@v3

    - name: Set up C++ compiler (Ubuntu GCC)
      if: matrix.compiler == 'gcc' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ cmake
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV

    - name: Set up C++ compiler (Ubuntu Clang)
      if: matrix.compiler == 'clang' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV

    - name: Set up C++ compiler (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          make

    - name: Set up C++ compiler (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm
        echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
        echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

    - name: Create build directory
      run: mkdir -p build

    - name: Configure CMake (Unix-like)
      if: matrix.os != 'windows-latest'
      working-directory: ${{ github.workspace }}/build
      run: |
        cmake .. \
          -DCMAKE_CXX_STANDARD=${{ matrix.cpp_std }} \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_FLAGS="-Wall -Wextra -O3"

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{ github.workspace }}/build
      shell: msys2 {0}
      run: |
        cmake .. \
          -G "MinGW Makefiles" \
          -DCMAKE_CXX_STANDARD=${{ matrix.cpp_std }} \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_FLAGS="-Wall -Wextra -O3"

    - name: Build (Unix-like)
      if: matrix.os != 'windows-latest'
      working-directory: ${{ github.workspace }}/build
      run: cmake --build . --config Release --parallel

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{ github.workspace }}/build
      shell: msys2 {0}
      run: cmake --build . --config Release --parallel

    - name: Run tests (Unix-like)
      if: matrix.os != 'windows-latest'
      working-directory: ${{ github.workspace }}/build
      run: ctest --output-on-failure --parallel

    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{ github.workspace }}/build
      shell: msys2 {0}
      run: ctest --output-on-failure --parallel 